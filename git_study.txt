1 要检查已有的配置信息，可以使用 
        git config --list
2 user config 
	第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：
	git config --global user.name "John Doe"
      	git config --global user.email johndoe@example.com
3 将你的仓库连接到某个远程服务器，你可以使用如下命令添加： 
        git remote add origin <server>

4 改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：
		git push origin master
	可以把 master 换成你想要推送的任何分支。 
5 创建新文件夹，打开，然后执行 
		git init
	以创建新的 git 仓库。
6 检出仓库
	执行如下命令以创建一个本地仓库的克隆版本：
		git clone /path/to/repository 
	如果是远端服务器上的仓库，你的命令会是这个样子：
		git clone username@host:/path/to/repository
7 添加与提交
	你可以计划改动（把它们添加到缓存区），使用如下命令：
		git add <filename>
		git add *
	这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：
		git commit -m "代码提交信息"
	现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。
8 分支
 	创建一个叫做“feature_x”的分支，并切换过去：
		git checkout -b feature_x
	切换回主分支：
		git checkout master
	再把新建的分支删掉：
		git branch -d feature_x
	除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：
		git push origin <branch>
9更新与合并

        要更新你的本地仓库至最新改动，执行：
		git pull
	以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。要合并其他分支到你的当前分支（例如 master），执行：
		git merge <branch>
	两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些文件来人肉合并这些 冲突（conflicts） 了。改完之后，你需要执行如下命令以将它们标记为合并成功：
		git add <filename>
	在合并改动之前，也可以使用如下命令查看：
		git diff <source_branch> <target_branch>
10 标签
	在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 1.0.0 的标签：
		git tag 1.0.0 1b2e1d63ff
	1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：
		git log
	你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。
11 替换本地改动
	假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：
		git checkout -- <filename>
	此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：
		git fetch origin
		git reset --hard origin/master



本文来源 http://www.bootcss.com/p/git-guide/









